<!-- 
AddGame.svelte

## Folder Structure:
- src/pages/AddGame.svelte

## Description:
This component provides a form for adding a new game to the global games list. 
It allows users to preview the entry before confirming it.

## Variables Exported:
- None.

## Variables Expected:
- None.

## Dependencies:
- `games` from `stores/games`: Global games list.
- `categoryOptions` from `data/categoryOptions.js`: Static list for categories.
- `navigate` from `stores/routes`: For navigation.
-->

<script>
    import { games } from "../stores/games";
    import { categoryOptions } from "../data/categoryOptions";
    import { languages } from "../stores/languages";  // Global list of languages
    import { navigate } from "../stores/routes";
    import { get } from "svelte/store";
    import Header from "../components/Header.svelte";

    // State for form inputs
    let name = "";
    let language = "English";  // Default language
    let minplayers = "";
    let maxplayers = "";
    let bggurl = "";
    let imageurl = "";
    let tag = "Other";
    let selectedCategories = [];
    let rating = 0;
    let lastplayed = "";
    let owner = "";

    // Tags for selection
    const tags = ["Cooperative", "Competitive", "Mix", "Other"];

    // State for preview and confirmation
    let isPreviewing = false;

    // Generate a new ID based on the games list
    const generateId = () => {
        const gamesList = get(games);
        return gamesList.length > 0 ? Math.max(...gamesList.map((g) => g.id)) + 1 : 1;
    };

    // Submit and add game
    const confirmAddGame = () => {
        const newGame = {
            id: generateId(),
            name,
            language,
            minplayers: parseInt(minplayers),
            maxplayers: parseInt(maxplayers),
            bggurl,
            imageurl,
            tag,
            category: selectedCategories,
            rating,
            lastplayed: lastplayed || "N/A",
            owner: owner ? [owner] : [],
        };

        games.update((list) => [...list, newGame]);

        // Navigate back
        navigate("/");
    };

    // Toggle category selection
    const toggleCategory = (option) => {
        if (selectedCategories.includes(option)) {
            selectedCategories = selectedCategories.filter((cat) => cat !== option);
        } else {
            selectedCategories = [...selectedCategories, option];
        }
    };

    // Cancel action
    const cancelAction = () => {
        navigate(-1);
    };
</script>

<!-- Header Component -->
<Header title="Add a New Game" />

<!-- Form -->
<div class="add-game">
    <h1>Add a New Game</h1>
    {#if !isPreviewing}
        <form on:submit|preventDefault={() => (isPreviewing = true)}>
            <label>
                Name (required):
                <input type="text" bind:value={name} required />
            </label>

            <label>
                Language (required):
                <select bind:value={language}>
                    {#each $languages as lang}
                        <option value={lang}>{lang}</option>
                    {/each}
                </select>
            </label>

            <label>
                Min Players (required):
                <input type="number" min="1" bind:value={minplayers} required />
            </label>

            <label>
                Max Players (required):
                <input type="number" min="1" bind:value={maxplayers} required />
            </label>

            <label>
                BoardGameGeek URL (required):
                <input type="url" bind:value={bggurl} required />
            </label>

            <label>
                Image URL (required):
                <input type="url" bind:value={imageurl} required />
            </label>

            <label>
                Tag (required):
                <select bind:value={tag}>
                    {#each tags as t}
                        <option value={t}>{t}</option>
                    {/each}
                </select>
            </label>

            <fieldset>
                <legend>Categories:</legend>
                {#each categoryOptions as option}
                    <label>
                        <input 
                            type="checkbox" 
                            value={option} 
                            on:change={() => toggleCategory(option)} 
                            checked={selectedCategories.includes(option)} 
                        />
                        {option}
                    </label>
                {/each}
            </fieldset>

            <!-- svelte-ignore a11y-label-has-associated-control -->
            <label>
                Rating:
                <div class="stars">
                    {#each [1, 2, 3, 4, 5] as star}
                        <!-- svelte-ignore a11y-click-events-have-key-events -->
                        <span 
                            class="star" 
                            on:click={() => (rating = star)}
                            style="color: {star <= rating ? 'gold' : 'gray'}; cursor: pointer;"
                        >
                            ★
                        </span>
                    {/each}
                </div>
            </label>

            <label>
                Last Played:
                <input type="date" bind:value={lastplayed} />
            </label>

            <label>
                Owner:
                <input type="text" bind:value={owner} />
            </label>

            <button type="submit">Preview</button>
            <button type="button" on:click={cancelAction}>Cancel</button>
        </form>
    {:else}
        <div class="preview">
            <h2>Preview Your Entry</h2>
            <p><strong>Name:</strong> {name}</p>
            <p><strong>Language:</strong> {language}</p>
            <p><strong>Players:</strong> {minplayers} - {maxplayers}</p>
            <p><strong>Tag:</strong> {tag}</p>
            <p><strong>Categories:</strong> {selectedCategories.join(", ") || "None"}</p>
            <p><strong>Rating:</strong> {rating} ★</p>
            <p><strong>Last Played:</strong> {lastplayed || "N/A"}</p>
            <p><strong>Owner:</strong> {owner || "N/A"}</p>
            <p><strong>BGG URL:</strong> <a href={bggurl} target="_blank">{bggurl}</a></p>
            <!-- svelte-ignore a11y-img-redundant-alt -->
            <p><img src={imageurl} alt="Game Image" width="200" /></p>

            <button on:click={confirmAddGame}>Confirm</button>
            <button on:click={() => (isPreviewing = false)}>Edit</button>
            <button on:click={cancelAction}>Cancel</button>
        </div>
    {/if}
</div>

<!-- Styles -->
<style>
    .add-game {
        max-width: 600px;
        margin: 0 auto;
        padding: 1rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    form label,
    fieldset {
        display: block;
        margin-bottom: 1rem;
    }

    input,
    select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    button {
        margin-right: 10px;
        padding: 0.5rem 1rem;
        background-color: turquoise;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    button:hover {
        background-color: #40e0d0;
    }

    .stars {
        font-size: 1.5rem;
    }

    .preview img {
        margin-top: 1rem;
    }
</style>
